// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3528.Simba.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3528.Simba.Robot;
import org.usfirst.frc3528.Simba.RobotMap;
import org.usfirst.frc3528.Simba.subsystems.DriveTrain;

/**
 *
 */
public class  DriveWithJoystick extends Command {
	
	DriveTrain dt = Robot.driveTrain;
	
	double gyroAngle;

    public DriveWithJoystick() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);


        requires(dt);

    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.gyro.reset();
    	//RobotMap.gyro.calibrate();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (!RobotMap.driveWithSingleJoystick) {
    		
    		double left = Robot.oi.driveStick.getRawAxis(1);
    		double right = Robot.oi.driveStick.getRawAxis(5);
    		dt.drive(left, right);
    	} else {
    		double left = Robot.oi.driveStick.getRawAxis(1);
    		double right = Robot.oi.driveStick.getRawAxis(1);
    		dt.drive(left, right);
    	}
    	
    	SmartDashboard.putBoolean("In Single Joystick Mode: ", RobotMap.driveWithSingleJoystick);
    	
    	gyroAngle = RobotMap.gyro.getAngle();
    	SmartDashboard.putNumber("Gyro Angle", gyroAngle);
    	
    	dt.printAccelToDashboard();
    	
    	//double yVal = dt.getAccelYVal();
    	
    	//boolean disableCheck = dt.checkDMCValue();
    	
    	/*if ( !dt.checkDMCValue() ) {
    		if (yVal > 0.2) {
        		System.out.println("This is where you'd run the Drive Forward Command.");
        		dt.toggleDMCValue();
        	}
    	} else if (yVal < 0.05) {
    			System.out.println("This is the end of the Drive Forward Command.");
    			dt.toggleDMCValue();
    	}*/
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
